#!/usr/bin/env python3

import subprocess
import sys
import os

from time import time

stdlib = "libc"
debug = False

if not os.path.exists("./build"):
    subprocess.call("mkdir build", shell=True)

compiledirs = [
    "./AssemblyUtils/src",
    "./src"
]


def compiledir(path, ninja):
    filenames = []
    for d, _, files in os.walk(path):
        for file in files:
            name, ext = os.path.splitext(file)
            if ext == ".s":
                filenames.append(name)
                ninja.write(f"build $build_dir/{name}.o: asm {d}/{name}.s\n")
    return filenames


with open("build.ninja", "w") as ninja:
    ninja.write("build_dir = build\n")
    ninja.write(f"c_flags = -stdlib={stdlib}\n")
    ninja.write(f"""
rule asm
    command = clang {" -g" if debug else ""} -o $out -c $in

""")
    ninja.write(f"""
rule link
    command = clang $c_flags -o $out $in

""")
    filenames = []
    for d in compiledirs:
        filenames.extend(compiledir(d, ninja))

    ninja.write("\nbuild a.out: link")
    for name in filenames:
        ninja.write(f" $\n    $build_dir/{name}.o")
    ninja.write("\n")


t0 = time()

subprocess.call("ninja")

comp_time = time() - t0

print(f"Compile time: {comp_time:.3f} s")

run_command = ["./a.out"]

for i in range(1, len(sys.argv)):
    run_command.append(sys.argv[i])

t = time()
subprocess.run(run_command)
t = time() - t
print(f"Run time: {t:.3f} s")
